#################################################################
#								#
#	Créateur : Arthur YANG - Responsable Documentation 	#
#				 & Administratif		#
			
#	Date de création : 07/02/2025				#
#								#
#	Dernier modificateur : Arthur YANG			#
#	Date de modification : 07/02/2025			#
#								#
#		Version actuelle : 1.0				#
#								#
#################################################################


----------------------- Déploiement du serveur de logs ----------------------- 

Sources : https://www.youtube.com/watch?v=iqpLXUdJ0Ro&ab_channel=Thetips4you
		https://blog.stephane-robert.info/docs/observer/logs/loki/
		https://www.aukfood.fr/collecter-et-afficher-les-logs-avec-grafana-loki/
		https://github.com/grafana/loki/blob/main/clients/cmd/promtail/promtail-local-config.yaml

Création du conteneur LXC :
   => Nom : SRV-LOG-AARD
   => OS : Debian-12-standard_12.7-1_amd64.tar.zst
   => Stockage : local -> local_zfs
   => Mot de passe root conteneur : Voir Bitwarden

Configuration réseau :
   => Interface : in - VLAN 20 (servers)
   => IP : 192.168.7.133
   => Masque : 255.255.255.240
   => Passerelle : 192.168.7.142
   => DNS : 192.168.7.129


Allocation des ressources :
   => CPU : 1 cœur
   => RAM : 512 Mb
   => Stockage : 16 Gb


Petite actions effectuées dans le conteneur : 

   => Connexion via root / mot de passe
   => apt update
   => apt upgrade
   => apt install unzip
   => apt install curl
   => Création utilisateur "log" et groupe "log" / mdp : voir Bitwarden, si besoin plus tard via adduser.

	
Installation de Loki et Promtail :

	Remarques : 
		-  Le port sur lequel Loki écoute les requêtes par défaut est 3100 qui permet aux utilisateurs d’interagir avec Loki via des requêtes HTTP.

1 Installation de Loki
   => Téléchargement et installation :
	On se place dans le chemin : /usr/local/bin/
	On télécharge le fichier zip de Loki : wget https://github.com/grafana/loki/releases/download/v3.3.2/loki-linux-amd64.zip
	Nous pouvons ensuite l'unzip : unzip (nom du fichier)
	C'est un fichier executable que l'on a.
      
   => Configuration de Loki :

	Nous devons ici, avoir un fichier nommé "loki-config.yml" pour la configuration de Loki.
	Nous pouvons télécharger un modèle pré-existant : wget https://raw.githubusercontent.com/grafana/loki/master/cmd/loki/loki-local-config.yaml
	Cela télécharge un modèle que l'on peut renommer comme nous le voulions.
	

	=> Config .yml personnalisé que nous effectuons : 

---------------------------------------------------------------------------------------------------------------------

auth_enabled: false

server:
  http_listen_port: 3100
  grpc_listen_port: 9096
  log_level: info  # Change "debug" en "info" pour éviter trop de logs inutiles en prod
  grpc_server_max_concurrent_streams: 1000

compactor:
  working_directory: /var/lib/loki/retention
  compaction_interval: 1m
  retention_enabled: true
  retention_delete_delay: 1m
  retention_delete_worker_count: 150
  delete_request_store: filesystem  # Stockage local pour les requêtes de suppression

common:
  instance_addr: 192.168.7.135  # Utilise l'IP de ton serveur au lieu de localhost
  path_prefix: /var/lib/loki  # Change "/tmp/loki" pour éviter de perdre les logs au reboot
  storage:
    filesystem:
      chunks_directory: /var/lib/loki/chunks
      rules_directory: /var/lib/loki/rules
  replication_factor: 1
  ring:
    kvstore:
      store: inmemory

query_range:
  results_cache:
    cache:
      embedded_cache:
        enabled: true
        max_size_mb: 500  # Augmente la taille du cache pour améliorer les performances

limits_config:
  metric_aggregation_enabled: true
  retention_period: 1m

schema_config:
  configs:
    - from: 2024-02-07  # Mets une date actuelle pour éviter des problèmes de compatibilité
      store: tsdb
      object_store: filesystem
      schema: v13
      index:
        prefix: index_
        period: 24h

pattern_ingester:
  enabled: true
  metric_aggregation:
    loki_address: 192.168.7.135:3100  # Mets l'IP du serveur de logs

ruler:
  alertmanager_url: http://192.168.7.134:9093  # Si tu as un Alertmanager sur le serveur de monitoring

frontend:
  encoding: protobuf

---------------------------------------------------------------------------------------------------------------------


	=> Créer un dossier /var/lib/loki/ : mkdir -p /var/lib/loki
		=> chown -R log:log /var/lib/loki
		=> chmod -R 750 /var/lib/loki

	=> Créer un dossier /var/lib/loki/retention : mkdir -p /var/lib/loki/retention
		=> chown -R log:log /var/lib/loki/retention
		=> chmod -R 750 /var/lib/loki/retention

	=> Nous mettons l'utilisateur créée plus tôt "log" en tant que propriétaire et propriétaire groupe des fichiers de config de Loki.
		=> chown -R log:log loki-config.yaml loki-linux-amd64
		=> chmod 755 loki-linux-amd64
		=> chmod 640 loki-config.yaml

	=> Création du fichier : /etc/systemd/system/loki.service 

--------------------------------------------------------------------------------------------

[Unit]
Description=Loki Grafana
Wants=network-online.target
After=network-online.target

[Service]
Type=simple
User=log 
Group=log 
ExecStart=/usr/local/bin/loki-linux-amd64 -config.file=/usr/local/bin/loki-config.yaml

SyslogIdentifier=log 
Restart=always

[Install]
WantedBy=multi-user.target

--------------------------------------------------------------------------------------------

	Commandes système et visualisation des logs en direct :

		=> systemctl enable loki.service 
		=> systemctl start loki.service
		=> systemctl status loki.service
		=> journalctl -f -u loki.service

	Normalement le service loki est lancé, et sur grafana on devrait pouvoir communiquer entre Loki et Grafana.


2 Installation de Promtail
   => Téléchargement et installation :
	On se place dans le chemin : /usr/local/bin/
	On télécharge le fichier zip de Promtail : wget https://github.com/grafana/loki/releases/download/v3.3.2/promtail-linux-amd64.zip
	Nous pouvons ensuite l'unzip : unzip (nom du fichier)
	C'est un fichier executable que l'on a.
      
   => Configuration de Promtail :

	Nous devons ici, avoir un fichier nommé "promtail-config.yml" pour la configuration de Promtail.
	Nous pouvons télécharger un modèle pré-existant : wget https://github.com/grafana/loki/blob/main/clients/cmd/promtail/promtail-local-config.yaml ou le créer nous même.
	Cela télécharge un modèle que l'on peut renommer comme nous le voulions.

	
=> Config .yml personnalisé que nous effectuons :

--------------------------------------------------------------------------------------------

server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /var/lib/promtail/positions.yaml

clients:
  - url: http://192.168.7.133:3100/loki/api/v1/push  # Utilisation de l'IP du serveur Loki

scrape_configs:
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: varlogs
          host: srv-log-aard
          stream: stdout
          __path__: /var/log/*

--------------------------------------------------------------------------------------------

=> Créer un dossier /var/lib/promtail/ : mkdir -p /var/lib/promtail
		=> chown -R log:log /var/lib/promtail
		=> chmod -R 750 /var/lib/promtail

	=> Nous mettons l'utilisateur créée plus tôt "log" en tant que propriétaire et propriétaire groupe des fichiers de config de Loki.
	
		=> chown -R log:log promtail-config.yaml promtail-linux-amd64
		=> chmod 755 promtail-linux-amd64
		=> chmod 640 promtail-config.yaml


	=> Création du fichier : /etc/systemd/system/promtail.service


--------------------------------------------------------------------------------------------

[Unit]
Description=Promtail Loki
Wants=network-online.target
After=network-online.target

[Service]
Type=simple
User=log
Group=log
ExecStart=/usr/local/bin/promtail-linux-amd64 -config.file=/usr/local/bin/promtail-config.yaml

SyslogIdentifier=log
Restart=always

[Install]
WantedBy=multi-user.target

--------------------------------------------------------------------------------------------


Commandes système et visualisation des logs en direct :

		=> systemctl enable promtail.service 
		=> systemctl start promtail.service
		=> systemctl status promtail.service
		=> journalctl -f -u promtail.service

	Normalement le service promtail est lancé.


Dans nos conteneurs LXC Debian, les logs semblent être dans le "journald" et non le syslog.

On installe "rsyslog" pour qu'ils puissent etre visible dans "syslog"

	=> apt install rsyslog -y
	=> systemctl enable rsyslog --now
	=> tail -f /var/log/syslog

Pour que notre utilisateur "log" puissent avoir les droits de lecture de logs, on va lui ajouter dans le groupe adm : 

	=> usermod -aG adm logserver
	=> systemctl restart promtail.service

En effet, Un problèmes d’accès aux fichiers /var/log/auth.log, /var/log/cron.log et /var/log/user.log par Grafana sera présent par le fait que l'on a paramétré le service promtail avec l'utilisateur "log".

Faire de même avec le fichier "syslog" : 

	=> chown log:root /var/log/syslog
	=> chmod 640 /var/log/syslog
	=> systemctl restart promtail.service

De manière générale, regarder les permissions des fichiers selon l'utilisateur qui utilise le service.