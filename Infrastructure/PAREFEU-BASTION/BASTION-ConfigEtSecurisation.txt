#################################################################
#								#
#	Créateur : Arthur YANG - Responsable Documentation 	#
#				 & Administratif		#
			
#	Date de création : 19/02/2025				#
#								#
#	Dernier modificateur : Arthur YANG			#
#	Date de modification : 19/02/2025			#
#								#
#		Version actuelle : 1.0				#
#								#
#################################################################


----------------------- Configuration et sécurisation du serveur bastion ----------------------- 

Sources :


Actions effectuées dans la VM : 

   => Connexion via root / mot de passe
   => apt update
   => apt upgrade
   => apt install unzip
   => Création d'un user "bastion" et son groupe sans accès interactif. (useradd --system --no-create-home --home /nonexistent --shell /usr/sbin/nologin bastion)

	
Installation de l'agent promtail (en root) :

	Installation de Promtail
  		 => Téléchargement et installation :
		On se place dans le chemin : /usr/local/bin/
		On télécharge le fichier zip de Promtail : wget https://github.com/grafana/loki/releases/download/v3.4.2/promtail-linux-amd64.zip
		Nous pouvons ensuite l'unzip : unzip (nom du fichier)
		C'est un fichier executable que l'on a.

	=> Configuration de Promtail :

	Nous devons ici, avoir un fichier nommé "promtail-config.yaml" pour la configuration de Promtail.
	Nous pouvons télécharger un modèle pré-existant : wget https://github.com/grafana/loki/blob/main/clients/cmd/promtail/promtail-local-config.yaml ou le créer nous même.
	Cela télécharge un modèle que l'on peut renommer comme nous le voulions.


=> Config .yaml personnalisé que nous effectuons :

--------------------------------------------------------------------------------------------

server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /var/lib/promtail/positions.yaml

clients:
  - url: http://192.168.7.133:3100/loki/api/v1/push  # Utilisation de l'IP du serveur Loki

scrape_configs:
  - job_name: SRV-BASTION-AARD-SYSLOG
    static_configs:
      - targets:
          - localhost
        labels:
          job: SYSLOG-AARD-BASTION
          host: SRV-BASTION-AARD
          stream: stdout
          __path__: /var/log/syslog

  - job_name: SRV-BASTION-AARD-MAIL
    static_configs:
      - targets:
          - localhost
        labels:
          job: MAIL-AARD-BASTION
          host: SRV-BASTION-AARD
          stream: stdout
          __path__: /var/log/mail.log

  - job_name: SRV-BASTION-AARD-CRON
    static_configs:
      - targets:
          - localhost
        labels:
          job: CRON-AARD-BASTION
          host: SRV-BASTION-AARD
          stream: stdout
          __path__: /var/log/cron.log

  - job_name: SRV-BASTION-AARD-AUTHLOG
    static_configs:
      - targets:
          - localhost
        labels:
          job: AUTHLOG-AARD-BASTION
          host: SRV-BASTION-AARD
          stream: stdout
          __path__: /var/log/auth.log

  - job_name: SRV-BASTION-AARD-APACHE2_LOGS
    static_configs:
      - targets:
          - localhost
        labels:
          job: APACHE2_LOGS-SRV-BASTION-AARD
          host: SRV-BASTION-AARD
          stream: stdout
          __path__: /var/log/apache2/*.log

--------------------------------------------------------------------------------------------

Avant de créer le repertoire PROMTAIL :
On va configurer les logs de Apache2 pour qu'ils soient visibles dans GRAFANA : 

	=> Les logs d'apache se trouvent dans le répertoire : /var/log/apache2
	=> On donne les droits pour pouvoir les récupérer et envoyer vers LOKI et GRAFANA 
		=> chown -R bastion:adm /var/log/apache2
		=> chmod -R 750 /var/log/apache2
	=> Le répertoire et tout les fichiers .log donne le droit à promtail donc de les récuperer.




=> Créer un dossier /var/lib/promtail/ : mkdir -p /var/lib/promtail
		=> chown -R bastion:bastion /var/lib/promtail
		=> chmod -R 750 /var/lib/promtail

	=> Nous mettons l'utilisateur créée plus tôt "bastion" en tant que propriétaire et propriétaire groupe des fichiers de config de Loki.
	
		=> chown -R bastion:bastion promtail-config.yaml promtail-linux-amd64
		=> chmod 755 promtail-linux-amd64
		=> chmod 640 promtail-config.yaml


	=> Création du fichier : /etc/systemd/system/promtail.service

--------------------------------------------------------------------------------------------

[Unit]
Description=Promtail Loki
Wants=network-online.target
After=network-online.target

[Service]
Type=simple
User=bastion
Group=bastion
ExecStart=/usr/local/bin/promtail-linux-amd64 -config.file=/usr/local/bin/promtail-config.yaml

SyslogIdentifier=bastion
Restart=always

[Install]
WantedBy=multi-user.target

--------------------------------------------------------------------------------------------


Commandes système et visualisation des logs en direct :

		=> systemctl enable promtail.service 
		=> systemctl start promtail.service
		=> systemctl status promtail.service
		=> journalctl -f -u promtail.service

	Normalement le service promtail est lancé.


Dans nos conteneurs LXC Debian, les logs semblent être dans le "journald" et non le syslog.

On installe "rsyslog" pour qu'ils puissent etre visible dans "syslog"

	=> apt install rsyslog -y
	=> systemctl enable rsyslog --now
	=> tail -f /var/log/syslog

Pour que notre utilisateur "bastion" puissent avoir les droits de lecture de logs, on va lui ajouter dans le groupe adm : 

	=> usermod -aG adm bastion
	=> systemctl restart promtail.service

En effet, Un problèmes d’accès aux fichiers /var/log/auth.log, /var/log/cron.log et /var/log/user.log par Grafana sera présent par le fait que l'on a paramétré le service promtail avec l'utilisateur "bastion".

Faire de même avec le fichier "syslog" : 

	=> chown bastion:root /var/log/syslog
	=> chmod 640 /var/log/syslog
	=> systemctl restart promtail.service


On peut rajouter : 

	=> chown bastion:utmp /var/log/btmp


De manière générale, regarder les permissions des fichiers selon l'utilisateur qui utilise le service.

Les logs de Guacamole meme si ont leur propres fichiers de logs, sont quand meme bien envoyé vers le syslog qui luit envoyé vers le serveur LOKI.



On va installer pour la fin, NODE EXPORTER pour récupérer des informations plus précises que avec SNMP, qui surveillera les serveurs directs et non les équipements réseaux.

	=> Dans /usr/local/bin/ , on télécharge NODE Exporter qui va nous servir à récupérer les métriques du serveur bastion ici.

		=> wget https://github.com/prometheus/node_exporter/releases/download/v1.9.0/node_exporter-1.9.0.linux-amd64.tar.gz
		=> tar -xvzf node_exporter-1.9.0.linux-amd64.tar.gz
		=> rm node_exporter-1.9.0.linux-amd64.tar.gz
		=> mv /usr/local/bin/node_exporter-1.9.0.linux-amd64/node_exporter /usr/local/bin/
		=> chown -R bastion:bastion /usr/local/bin/node_exporter
		=> chmod 755 /usr/local/bin/node_exporter
		=> rm -r /usr/local/bin/node_exporter-1.9.0.linux-amd64/


=> Création du fichier : nano /etc/systemd/system/node_exporter.service

--------------------------------------------------------------------------------------------

[Unit]
Description=Prometheus NODE Exporter
Wants=network-online.target
After=network-online.target

[Service]
Type=simple
User=bastion
Group=bastion
ExecStart=/usr/local/bin/node_exporter \
  --web.listen-address=0.0.0.0:XXXX \
  --collector.systemd \
  --collector.processes

SyslogIdentifier=bastion
Restart=always

[Install]
WantedBy=multi-user.target

--------------------------------------------------------------------------------------------

On a changé ici le port d'écoute de SNMP EXPORTER de Prometheus ici, dans le fichier du service. Ca ne se fait pas dans le .yml car il n'y pas de fichier .yml pour NODE Exporter .

Commandes système et visualisation des logs en direct :

		=> systemctl daemon-reexec
		=> systemctl daemon-reload
		=> systemctl enable node_exporter.service 
		=> systemctl start node_exporter.service 
		=> systemctl status node_exporter.service 
		=> journalctl -f -u node_exporter.service

Voila pour l'installation de NODE EXPORTER.


=> Ajout du MOTD personnalisé sur la VM (et toutes) du NAS.
/etc/motd

Wizards & Dice | Shell Access for Debian GNU/Linux

***********************************************************************************************************************
*							LEGAL NOTICE
* This system is for authorized use only. All activities on this system may be * monitored and recorded. Unauthorized access or use is strictly prohibited * and may result in disciplinary action, criminal prosecution, or both. By * continuing to use and access this system, you consent to such monitoring.*

***********************************************************************************************************************


=> Ajout des éléments pour le monitoring des machines et de leurs MAJS.

	=> wget https://raw.githubusercontent.com/labmonkeys-space/apt-prometheus/main/script/apt-metrics.sh -O /usr/local/bin/apt-metrics.sh
	=> chmod 750 /usr/local/bin/apt-metrics.sh
	=> chown bastion /usr/local/bin/apt-metrics.sh
	=> Puis on change tout le fichier : 

-------------------------------------------------------------------------------------------------------------------------

#!/bin/bash

OUT_FILE="/var/lib/node_exporter/textfile_collector/apt_updates.prom"

# Total updates
TOTAL_UPDATES=$(apt list --upgradeable 2>/dev/null | grep -v "Listing" | wc -l)

# Security updates (si 'unattended-upgrades' est installé)
SEC_UPDATES=$(apt list --upgradeable 2>/dev/null | grep security | wc -l)

# Reboot required (flag fichier)
if [ -f /var/run/reboot-required ]; then
  REBOOT_NEEDED=1
else
  REBOOT_NEEDED=0
fi

# Export en format Prometheus
echo "# HELP debian_apt_updates Nombre total de mises à jour APT" > "$OUT_FILE"
echo "# TYPE debian_apt_updates gauge" >> "$OUT_FILE"
echo "debian_apt_updates $TOTAL_UPDATES" >> "$OUT_FILE"

echo "# HELP debian_security_updates Nombre de mises à jour de sécurité" >> "$OUT_FILE"
echo "# TYPE debian_security_updates gauge" >> "$OUT_FILE"
echo "debian_security_updates $SEC_UPDATES" >> "$OUT_FILE"

echo "# HELP debian_reboot_required Système nécessite un redémarrage" >> "$OUT_FILE"
echo "# TYPE debian_reboot_required gauge" >> "$OUT_FILE"
echo "debian_reboot_required $REBOOT_NEEDED" >> "$OUT_FILE"

-------------------------------------------------------------------------------------------------------------------------

Dans le node_exporter.service

-------------------------------------------------------------------------------------------------------------------------

[Unit]
Description=Prometheus NODE Exporter
Wants=network-online.target
After=network-online.target

[Service]
Type=simple
User=bastion
Group=bastion
ExecStart=/usr/local/bin/node_exporter --web.listen-address=0.0.0.0:XXXX --collector.systemd --collector.processes --collector.textfile --collector.textfile.directory=/var/lib/node_exporter/textfile_collector

SyslogIdentifier=bastion
Restart=always

[Install]
WantedBy=multi-user.target

-------------------------------------------------------------------------------------------------------------------------

=> mkdir -p /var/lib/node_exporter/textfile_collector
=> chown -R bastion:root /var/lib/node_exporter/textfile_collector
=> chmod -R 770 /var/lib/node_exporter/textfile_collector

		=> systemctl daemon-reexec
		=> systemctl daemon-reload
		=> systemctl restart node_exporter.service 
		=> systemctl status node_exporter.service

Il faut maintenant faire un cron, pour executer le script "apt-metrics.sh" régulièrement : 

-------------------------------------------------------------------------------------------------------------------------
=> crontab -e

30 7 * * * /usr/local/bin/apt-metrics.sh

=> systemctl restart cron.service

-------------------------------------------------------------------------------------------------------------------------

Maintenant il suffit sur grafana avec le dashboard, de regarder ce que nous voulons voir.


Suite à l'ajout de UFW par Hugo, la règle pour les logs n'a pas été mise donc les logs ne passaient plus.
	=> ufw allow out to 192.168.7.133 port 3100 proto tcp comment "Accès à Loki pour logs"

Pour ajouter la possibilité de PING, il faut modifier le fichier /etc/ufw/before.rules et ajouter :

----------------------------------------------------------------------------------

# allow ICMP outbound (ping vers l'extérieur)
-A ufw-before-output -p icmp --icmp-type echo-request -j ACCEPT
-A ufw-before-output -p icmp --icmp-type destination-unreachable -j ACCEPT
-A ufw-before-output -p icmp --icmp-type time-exceeded -j ACCEPT
-A ufw-before-output -p icmp --icmp-type echo-reply -j ACCEPT

----------------------------------------------------------------------------------



Installation lynis + fail2ban


=> Executer lynis dans syslog : lynis audit system | logger -t lynis

OU

=> Executer le script dans /usr/local/bin/lynis-syslog.sh

nano /usr/local/bin/lynis-syslog.sh

Script : 

--------------------------------------

#!/bin/bash
lynis audit system | logger -t lynis

--------------------------------------

=> chmod 750 /usr/local/bin/lynis-syslog.sh
=> chown bastion /usr/local/bin/lynis-syslog.sh

Pas de cron.

On peut voir depuis GRAFANA dans les logs, le résultat.


Fail2Ban (installé par HUGO)