#################################################################
#								#
#	Créateur : Arthur YANG - Responsable Documentation 	#
#				 & Administratif		#
			
#	Date de création : 16/03/2025				#
#								#
#	Dernier modificateur : Arthur YANG			#
#	Date de modification : 16/03/2025			#
#								#
#		Version actuelle : 1.0				#
#								#
#################################################################


----------------------- Configuration et sécurisation du serveur RPROXY ----------------------- 

Sources : 


Actions effectuées dans le conteneur : 

   => Connexion via root / mot de passe
   => apt install unzip
   => Installation de l'agent promtail
   => Création d'un user "rproxy" et son groupe sans accès interactif. (useradd --system --no-create-home --home /nonexistent --shell /usr/sbin/nologin rproxy)

	Installation de Promtail
  		 => Téléchargement et installation :
		On se place dans le chemin : /usr/local/bin/
		On télécharge le fichier zip de Promtail : wget https://github.com/grafana/loki/releases/download/v3.4.2/promtail-linux-amd64.zip
		Nous pouvons ensuite l'unzip : unzip (nom du fichier)
		C'est un fichier executable que l'on a.

	=> Configuration de Promtail :

	Nous devons ici, avoir un fichier nommé "promtail-config.yaml" pour la configuration de Promtail.
	Nous pouvons télécharger un modèle pré-existant : wget https://github.com/grafana/loki/blob/main/clients/cmd/promtail/promtail-local-config.yaml ou le créer nous même.
	Cela télécharge un modèle que l'on peut renommer comme nous le voulions.


=> Config .yaml personnalisé que nous effectuons :

--------------------------------------------------------------------------------------------

server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /var/lib/promtail/positions.yaml

clients:
  - url: http://192.168.7.133:3100/loki/api/v1/push  # Utilisation de l'IP du serveur Loki

scrape_configs:
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: varlogs
          host: SRV-RPROXY-AARD
          stream: stdout
          __path__: /var/log/*

--------------------------------------------------------------------------------------------


=> Créer un dossier /var/lib/promtail/ : mkdir -p /var/lib/promtail
		=> chown -R rproxy:rproxy /var/lib/promtail
		=> chmod -R 750 /var/lib/promtail

	=> Nous mettons l'utilisateur créée plus tôt "rproxy" en tant que propriétaire et propriétaire groupe des fichiers de config de Loki.
	
		=> chown -R rproxy:rproxy promtail-config.yaml promtail-linux-amd64
		=> chmod 755 promtail-linux-amd64
		=> chmod 640 promtail-config.yaml


	=> Création du fichier : /etc/systemd/system/promtail.service


Pour ce serveur qui a un problème de CPU et RAM avec promtail, nous limitions le service afin qu'il ne consomme pas trop.

	=> Limite mémoire à 50 Mo
	=> Limite CPU à 10%
	=> Processus avec priorité basse (Nice=10)

--------------------------------------------------------------------------------------------

[Unit]
Description=Promtail Loki
Wants=network-online.target
After=network-online.target

[Service]
Type=simple
User=rproxy
Group=rproxy
MemoryLimit=50M
CPUQuota=10%
Nice=10
ExecStart=/usr/local/bin/promtail-linux-amd64 -config.file=/usr/local/bin/promtail-config.yaml

SyslogIdentifier=rproxy
Restart=always

[Install]
WantedBy=multi-user.target

--------------------------------------------------------------------------------------------


Commandes système et visualisation des logs en direct :

		=> systemctl enable promtail.service 
		=> systemctl start promtail.service
		=> systemctl status promtail.service
		=> journalctl -f -u promtail.service

	Normalement le service promtail est lancé.


Dans nos conteneurs LXC Debian, les logs semblent être dans le "journald" et non le syslog.

On installe "rsyslog" pour qu'ils puissent etre visible dans "syslog"

	=> apt install rsyslog -y
	=> systemctl enable rsyslog --now
	=> tail -f /var/log/syslog

Pour que notre utilisateur "rproxy" puissent avoir les droits de lecture de logs, on va lui ajouter dans le groupe adm : 

	=> usermod -aG adm rproxy
	=> systemctl restart promtail.service

En effet, Un problèmes d’accès aux fichiers /var/log/auth.log, /var/log/cron.log et /var/log/user.log par Grafana sera présent par le fait que l'on a paramétré le service promtail avec l'utilisateur "rproxy".

Faire de même avec le fichier "syslog" : 

	=> chown rproxy:root /var/log/syslog
	=> chmod 640 /var/log/syslog
	=> systemctl restart promtail.service

On peut rajouter : 

	=> chown rproxy:utmp /var/log/btmp



De manière générale, regarder les permissions des fichiers selon l'utilisateur qui utilise le service.

Promtail récupère donc les logs globaux de la machine mais pas de NGINX et LetsEncrypt.

Il faut ajouter 2 jobs qui vont chercher les fichier .log de NGINX et de LetsEncrypt explicitement.

On modifie le groupe de "Letsencrypt" : chgrp -R adm /var/log/letsencrypt et chmod -R 750 /var/log/letsencrypt + chown -R rproxy /var/log/letsencrypt
Pour "nginx" =>  chgrp -R adm /var/log/nginx puis chmod -R 750 /var/log/nginx

Donc il faut modifier et ajouter dans le fichier promtail-config.yaml : 

--------------------------------------------------------------------------------------------

server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /var/lib/promtail/positions.yaml

clients:
  - url: http://192.168.7.133:3100/loki/api/v1/push  # Utilisation de l'IP du serveur Loki

scrape_configs:
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: varlogs
          host: SRV-RPROXY-AARD
          stream: stdout
          __path__: /var/log/*

  - job_name: nginx_logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx
          host: SRV-RPROXY-AARD
          stream: stdout
          __path__: /var/log/nginx/*

  - job_name: letsencrypt_logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: letsencrypt
          host: SRV-RPROXY-AARD
          stream: stdout
          __path__: /var/log/letsencrypt/*.log

--------------------------------------------------------------------------------------------

On restart les services de la suite GRAFANA (Loki, promtail, grafana).


Maintenant sur GRAFANA, on pourra voir les noms des jobs qui iront chercher les fichiers logs de nginx et letsencrypt.