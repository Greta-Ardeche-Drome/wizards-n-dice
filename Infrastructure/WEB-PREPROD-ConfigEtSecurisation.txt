#################################################################
#								#
#	Créateur : Arthur YANG - Responsable Documentation 	#
#				 & Administratif		#
			
#	Date de création : 19/02/2025				#
#								#
#	Dernier modificateur : Arthur YANG			#
#	Date de modification : 19/02/2025			#
#								#
#		Version actuelle : 1.0				#
#								#
#################################################################


----------------------- Configuration et sécurisation du serveur web préprod ----------------------- 

Sources :


Actions effectuées dans la VM : 

   => Connexion via root / mot de passe
   => apt update
   => apt upgrade

	
Installation de l'agent promtail (en root) :

	Installation de Promtail
  		 => Téléchargement et installation :
		On se place dans le chemin : /usr/local/bin/
		On télécharge le fichier zip de Promtail : wget https://github.com/grafana/loki/releases/download/v3.4.2/promtail-linux-amd64.zip
		Nous pouvons ensuite l'unzip : unzip (nom du fichier)
		C'est un fichier executable que l'on a.

	=> Configuration de Promtail :

	Nous devons ici, avoir un fichier nommé "promtail-config.yaml" pour la configuration de Promtail.
	Nous pouvons télécharger un modèle pré-existant : wget https://github.com/grafana/loki/blob/main/clients/cmd/promtail/promtail-local-config.yaml ou le créer nous même.
	Cela télécharge un modèle que l'on peut renommer comme nous le voulions.


=> Config .yaml personnalisé que nous effectuons :

--------------------------------------------------------------------------------------------

server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /var/lib/promtail/positions.yaml

clients:
  - url: http://192.168.7.133:3100/loki/api/v1/push  # Utilisation de l'IP du serveur Loki

scrape_configs:
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: varlogs
          host: SRV-WEB-AARD
          stream: stdout
          __path__: /var/log/*

--------------------------------------------------------------------------------------------


=> Créer un dossier /var/lib/promtail/ : mkdir -p /var/lib/promtail
		=> chown -R webpreprod:webpreprod /var/lib/promtail
		=> chmod -R 750 /var/lib/promtail

	=> Nous mettons l'utilisateur créée plus tôt "webpreprod" en tant que propriétaire et propriétaire groupe des fichiers de config de Loki.
	
		=> chown -R webpreprod:webpreprod promtail-config.yaml promtail-linux-amd64
		=> chmod 755 promtail-linux-amd64
		=> chmod 640 promtail-config.yaml


	=> Création du fichier : /etc/systemd/system/promtail.service

--------------------------------------------------------------------------------------------

[Unit]
Description=Promtail Loki
Wants=network-online.target
After=network-online.target

[Service]
Type=simple
User=webpreprod
Group=webpreprod
ExecStart=/usr/local/bin/promtail-linux-amd64 -config.file=/usr/local/bin/promtail-config.yaml

SyslogIdentifier=webpreprod
Restart=always

[Install]
WantedBy=multi-user.target

--------------------------------------------------------------------------------------------


Commandes système et visualisation des logs en direct :

		=> systemctl enable promtail.service 
		=> systemctl start promtail.service
		=> systemctl status promtail.service
		=> journalctl -f -u promtail.service

	Normalement le service promtail est lancé.


Dans nos conteneurs LXC Debian, les logs semblent être dans le "journald" et non le syslog.

On installe "rsyslog" pour qu'ils puissent etre visible dans "syslog"

	=> apt install rsyslog -y
	=> systemctl enable rsyslog --now
	=> tail -f /var/log/syslog

Pour que notre utilisateur "webpreprod" puissent avoir les droits de lecture de logs, on va lui ajouter dans le groupe adm : 

	=> usermod -aG adm webpreprod
	=> systemctl restart promtail.service

En effet, Un problèmes d’accès aux fichiers /var/log/auth.log, /var/log/cron.log et /var/log/user.log par Grafana sera présent par le fait que l'on a paramétré le service promtail avec l'utilisateur "webpreprod".

Faire de même avec le fichier "syslog" : 

	=> chown webpreprod:root /var/log/syslog
	=> chmod 640 /var/log/syslog
	=> systemctl restart promtail.service


On peut rajouter : 

	=> chown webpreprod:utmp /var/log/btmp


De manière générale, regarder les permissions des fichiers selon l'utilisateur qui utilise le service.


Configurer les logs pour qu'ils soient visibles dans GRAFANA : 

	=> Les logs d'apache se trouvent dans le répertoire : /var/log/apache2
	=> On donne les droits pour pouvoir les récupérer et envoyer vers LOKI et GRAFANA 
		=> chown -R webpreprod:adm /var/log/apache2
	=> Le répertoire et tout les fichiers .log donne le droit à promtail donc de les récuperer.

Nous devons maintenant configurer le fichier promtail-config.yaml :

--------------------------------------------------------------------------------------------

server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /var/lib/promtail/positions.yaml

clients:
  - url: http://192.168.7.133:3100/loki/api/v1/push  # Utilisation de l'IP du serveur Loki

scrape_configs:
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: varlogs
          host: SRV-BDD-PREPROD-AARD
          stream: stdout
          __path__: /var/log/*

  - job_name: apache2_logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: apache2_webpreprod
          host: SRV-WEB-PREPROD-AARD
          stream: stdout
          __path__: /var/log/apache2/*.log

--------------------------------------------------------------------------------------------

Nous pouvons recharger promtail puis s'apercevoir la réception des logs dans GRAFANA.

Maintenant nous voulons aussi les logs mais de Wordpress.
Pour cela, nous installons le plugin directement sur le wordpress admin, intitulé "WP Activity Log", l'activons et suivons le tuto d'install.
Nous modifions ce que nous avons mis comme MAIL a la base pour l'admin du WP. wizardsndice@outlook.fr => svg.wizardsndice@gmail.com

Une fois mis en place, on a un menu pour les logs sur wordpress.
Pour compléter le monitoring des logs de WP, il faut dans le menu du plugin installé, dans 'Réglages', puis 'Modif de fichiers', installé Melapress.

Pour la config de melapress, la freq. d'analyse est hebdomadaire et à 2h00 le lundi. La config de base déja coché est laissé et effectué. La purge des evenements se fera tout les 10 scans.
La config se termine pour MelaPress. Les changements de paramètres pour Melapress est a gauche dans le menu "File Monitoring".

Des notifs via emails peuvent être envoyés pour des rapport des ce logs par exemple. Nous autorisons sur le FW l'envoi de mail et nous pouvons normalement recevoir sur les boites mails. Nous enverrons les mails sur la boite 'svg.wizardsndice@gmail.com' donc nous avons paramétré les plugins afin qu'ils envoient sur notre boite mail SVG.

Pour l'envoi des mails, nous installons un plugin / client smtp sur wordpress. 'WP Mail SMTP' est le nom du plugin.
Nous ne suivons pas l'assistant de config : on choisit d'aller dans les réglages de WP mail SMTP, et de choisir dans les services d'envoi, l'option "Autre SMTP"
Nous pouvons ainsi ici configurer notre compte GMAIL "SVG" pour pouvoir envoyer des mails depuis wordpress.

La config est simple : 

	=> Hébergeur SMTP : smtp.gmail.com
	=> Cryptage : TLS
	=> Port : 587
	=> Authentification activé
	=> ID SMTP : svg.wizardsndice@gmail.com
	=> Mdp smtp : Le mot de passe d'application créer dans les paramètres de la boite mail SVG

Sauvegarder ensuite, puis nous pouvons tester l'envoi de mail depuis les plugins installés, tout fonctionne normalement.
Les plugins étant gratuit, ne donnent pas vraiment d'informations sur les logs dans le rapport, néanmoins ils pourraient être utile et plus largement détaillés avec une version payante.

Nous configurons aussi des filtres et étiquettes pour la réception de ces mails sur la boite GMAIL SVG. Selon si c'est de DRYN ou AARD en fonction de l'ip source pour le moment.


Nous avons donc maintenant pour WordPress le monitoring des logs sur WordPress directement. Il faudrait faire des configurations plus "avancées" pour pouvoir avoir ces logs sur GRAFANA, mais demande plus d'investigation. Néanmoins les logs d'apache sont bien dispo sur GRAFANA.


Après cette phase de config des logs / monitoring, on peut passer au configs suivantes.


Nous allons ajouter la possibilité de pouvoir se connecter avec des identifiant ldap sur le wordpress.
Pour cela, nous installons le plugin "Active Directory / LDAP Intergration".

Il faut aussi ajouter l'extension PHP LDAP.


	=> Étape 1
		Pour Ubuntu/Debian, la commande d'installation serait sudo apt-get -y install php-Idap.
		Recherchez extension=php_ldap.so dans le fichier /etc/php/8.2/apache2/php.ini. Décommentez cette ligne, si elle n'est pas présente, ajoutez cette ligne dans le fichier et enregistrez le fichier
		Dans notre cas, on ajoute cette ligne.
		
	Étape 3
	Redémarrez le serveur. Ensuite, actualisez la page de configuration du plugin LDAP/AD

On peut passer ensuite a la config : 

	=> On ouvre les ports 389 du SRV DC vers le serveur WEBPREPROD
	=> On créer un compte LDAP pour la liaison : wordpress.wp (MDP sur bitwarden)
	=> Service Account Username : wordpress.wp@wnd.local
	=> Teste la liaison : OK
	=> Search Base : dc=wnd,dc=local
	=> SAMAccountName = wnd.local\user
	=> On peut tester avec nos user : OK donc config de base FINI

Après on peut personnaliser les rôles etc ...
	=> faire du role mapping (Le mappage de rôles permet d'attribuer un rôle WordPress en fonction du groupe LDAP auquel appartient un utilisateur sur le serveur LDAP). 
	=> Néanmoins, comme nous avons la version gratuite, nous pourrons pas le faire.
	=> Donc par défaut nos comptes LDAP sont des abonnées du WP. Nous pourrons modifier nos rôles a nous une fois connecté une fois sur WP pour etre admin.

Dans le menu "Attribute Mapping", 

	=> Infos sur cette partie : https://faq.miniorange.com/knowledgebase/configure-attribute-mapping-in-ldap/
	=> nous laissons "username@email_domain" dans la premiere case, rien dans la 2eme et les autres rien car abonnement gratuit

Ensuite dans le dernier menu, nous autorisons tous ce que nous pouvons jusqu'aux options au abonnés.

Nous pouvons tester le ldap sur la page d'accueil de connexion => Ca fonctionne
Mais nous sommes juste lecteur, donc avec le compte "superadmin", nous pouvons modifier le role et mettre admin dans le menu des comptes.
Il faut obligatoirment mettre un mail aux users, j'ai inventé pour le moment.

Voila pour le LDAP intégré sur Wordpress.

Nous pouvons suivre les recommendés de WP dans "l'état de santé du site" dans le menu "tableau de bord" qui permet de savoir au niveau conf perf,sécu ce que nous pouvons faire.
Au niveau des conf performances, nous mettre en place les modules PHP importants qui ne sont pas forcément présent mais qui servent pour faire tourner le site.

Les modules nécessaires sont : 
	=> imagick
	=> intl

Nous installons donc ces modules sur le serveur web : 
	=> apt install php-imagick -y
	=> apt install php-intl -y

Puis on restart le service apache2.
Les modules sont installés et serviront pour plus tard.

Il faut aussi voir la mise en cache des pages web/wordpress.
(Elles permettent l'upgrade de la vitesse et perf du site en servant des pages statiques au client au lieu de tout le temps générer dynamiquement à chaque visite)

Pour cela, nous installons un plugin : "W3 Super Cache"
Après l'installation, il va falloir autoriser plus de droits sur le serveur WEB et notamment le fichier wp-config.php (Actuellement en 400)

	=> chmod 600 /var/www/html/wp-config.php
	=> chmod -R 777 /var/www/html/wp-content
Attention : Ce 2ème réglage est temporaire. Une fois WP Super Cache configuré, il faudra remettre des permissions plus sécurisées.

Puis restart du service apache2, rafraichir la page WP sur le web.
Maintenant on repasse à des droits plus restrictifs : 

	=> chmod -R 755 /var/www/html/wp-content

Apres restart encore du service apache2 et page admin web de WP
On voit que la page réglage est enlevé au final apres nos parametrages. L'installation est ainsi finit.
Maintenant il faut continuer à configurer ce plugin. Mais nous le ferons dans un autre temps.

Voila pour les reco de WP mais il pourrait en avoir d'autres bien sur.

Woocommerce
Config en cmd mais aussi voir sur Wordpress direct 
(partie sécu (par le site, le plugin pour le cache, autres), mettre plus tard wordpress derrière un rproxy)